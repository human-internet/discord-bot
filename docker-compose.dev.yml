version: '3.7'
services:
  postgres:
    container_name: postgres
    env_file:
      - .env
    image: postgres
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - human_id
  bot:
    container_name: discord_bot
    build:
      context: ./bot
      dockerfile: dockerfile
    env_file:
      - ./bot/.env
    networks:
      - human_id
    volumes:
      - ./bot/.env:/bot/.env
      - ./bot/discordbot.py:/bot/discordbot.py
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: dockerfile
    env_file:
      - ./frontend/.env
    ports:
      - "3000:3000"
    networks:
      - human_id
    volumes:
      - ./frontend/.env:/app/.env
      - ./frontend/src:/app/src
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: dockerfile
    env_file:
      - ./backend/.env
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    networks:
      - human_id
    volumes:
      - ./backend/.env:/code/.env
      - ./backend/api:/code/api
      - ./backend/backend:/code/backend
      - ./backend/sql:/code/sql
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always



networks:
  human_id:
    driver: bridge
